generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL") // uses connection pooling    
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection   
}

model User {
  id           String   @id @default(uuid())
  username     String   @unique
  password     String?
  email        String   @unique
  gender       String?
  country      String?
  biodata      String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  // Relations
  goals         Goal[]
  activities    Activity[]
  dailyProgress DailyProgress[]
  sessions      Session[]
}

model Category {
  id        String   @id @default(uuid())
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  goals Goal[]
}

model Goal {
  id          String   @id @default(uuid())
  title       String
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Foreign keys
  userId     String
  user       User     @relation(fields: [userId], references: [id])
  categoryId String
  category   Category @relation(fields: [categoryId], references: [id])

  // Relations
  activities    Activity[]
  dailyProgress DailyProgress[]
}

model Activity {
  id          String    @id @default(uuid())
  title       String
  description String?
  isCompleted Boolean   @default(false)
  completedAt DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // Foreign keys
  userId String
  user   User   @relation(fields: [userId], references: [id])
  goalId String
  goal   Goal   @relation(fields: [goalId], references: [id])
}

model DailyProgress {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Foreign keys
  userId String
  user   User   @relation(fields: [userId], references: [id])
  goalId String
  goal   Goal   @relation(fields: [goalId], references: [id])
}

model Session {
  id         String   @id @default(uuid())
  userId     String
  user       User     @relation(fields: [userId], references: [id])
  token      String   @unique
  createdAt  DateTime @default(now())
  expiresAt  DateTime

  @@index([userId])
}